out = readRDS("final_AUS.rds")
# sig2_eta_save = out$sig2_psi
# log_beta_sigma = out$
# eta_save = out$eta
log_beta_save = out$log_beta
# alpha_save = out$beta_0
beta_samps = exp(log_beta_save)
dat_full = cbind(data.frame(distance = y_GDM,
weights = rep(1,length(y_GDM)),
s1.xCoord = location_mat$x[row_ind],
s1.yCoord = location_mat$y[row_ind],
s2.xCoord = location_mat$x[col_ind],
s2.yCoord = location_mat$y[col_ind]),
s1 = X[row_ind,],
s2 = X[col_ind,])
gmd_mod = gdm(dat_full,geo = TRUE, splines = rep(4,4))
plot(X$`Soil Phosphorus`,I_spline_bases[,c(1:4)] %*%  gmd_mod$coefficients[5:8])
####### ####### ####### ####### ####### ####### #######
####### Plot variable importance
####### ####### ####### ####### ####### ####### #######
tmp = sapply(1:4,function(i){
bet_now = t(beta_samps[,(df_use*(i -1)+ 1):(df_use*i)])
return(apply(bet_now,2,function(x){
sum(x)}))
})
X_temp = X
colnames(X_temp) = c("Phosphorus","Temperature","Precipitation")
colnames(tmp) = c(colnames(X_temp),"Distance")
tmp_long = melt(tmp)
colnames(tmp_long) = c("rep","Covariate","Variable Importance")
df2 = tmp_long %>%  group_by(Covariate) %>%
dplyr::summarize(mean = mean(`Variable Importance`),
CI_lo = quantile(`Variable Importance`,0.05),
CI_hi = quantile(`Variable Importance`,0.95))
quantiles_95 <- function(x) {
r <- quantile(x, probs=c(0.05, 0.25, 0.5, 0.75, 0.95))
names(r) <- c("ymin", "lower", "middle", "upper", "ymax")
r
}
pdf("variable_importance2_AUS.pdf",width = 12,height =8)
ggplot(df2, aes(x=Covariate, y=mean, group=Covariate, color=Covariate)) +
# geom_line(size = 2) +
geom_hline(yintercept = (0:4)/10,col = "darkgray",linetype = "dashed")+
# geom_hline(yintercept = .1,col = "darkgray",linetype = "dashed")+
# geom_hline(yintercept = .2,col = "darkgray",linetype = "dashed")+
# geom_hline(yintercept = .3,col = "darkgray",linetype = "dashed")+
geom_point(size = 2.5)+
geom_errorbar(aes(ymin=CI_lo  , ymax=CI_hi), width=.3,
position=position_dodge(0.05),size = .7) +
theme(axis.text.x = element_text(angle = 300, vjust = .5, hjust=0))+
theme(axis.text=element_text(size=26),
#  axis.text.x = element_blank(),
axis.title=element_text(size=26),
legend.position = "none")+
scale_fill_viridis_d(end = .75) +
scale_color_viridis_d(end = .75) +
labs(x="", y = "Variable Importance") +
ylim(c(0,.48))
dev.off()
setwd("~/Documents/Projects/Turnover/code/final")
library(tidyverse)
library(stringr)
library(ggplot2)
library(reshape2)
library(abind)
library(parallel)
library(splines)
library(geoR)
library(fields)
library(geosphere)
library(splines2)
library(rgdal)
library(nimble)
library(vegan)
# library(Hmisc)
library(TruncatedNormal)
library(emulator)
library(scoringRules)
library(sf)
############## map for families
rm(list = ls())
dat_all = read.csv("family_data_no_zero.csv")[,-1]
location_mat = dat_all[,1:3]
cord.dec = SpatialPoints(cbind(location_mat$longitude, location_mat$latitude),
proj4string = CRS("+proj=longlat"))
# Transforming coordinate to UTM using EPSG=32748 for WGS=84, UTM Zone=48M,
# Southern Hemisphere)
cord.UTM <- spTransform(cord.dec, CRS("+proj=utm +zone=34 +datum=WGS84"))
location_mat$easting = (cord.UTM@coords[,1] - cord.UTM@bbox[1,1])/1000
location_mat$northing = (cord.UTM@coords[,2] - cord.UTM@bbox[2,1])/1000
envr_use = dat_all[,c(4,5,8,9,10,11,12)]
species_mat = dat_all[,-(1:12)]
ns = nrow(location_mat)
dist_use = as.matrix(vegdist(species_mat,"bray"))
mean(dist_use[upper.tri(dist_use)] == 0)
mean(dist_use[upper.tri(dist_use)] == 1)
dist_mat= distm(cbind(location_mat$longitude,location_mat$latitude))/1e3
X = envr_use[,c("gmap","RFL_CONC","Elevation30m","HeatLoadIndex30m","tmean13c",
"SoilConductivitymSm","SoilTotalNPercent")]
colnames(X) = c("Annual Precipiation (mm)","Rainfall Concentration","Elevation (m)",
"Heat Load","Mean Temp (C)","Soil Conductivity","Soil Nitrogen")
deg = 3
knots = 2
df_use = deg + knots
formula_use = as.formula(paste("~ 0 +",paste(
paste("iSpline(`",colnames(X),"`,degree=",deg - 1 ,",df = ",df_use,
" ,intercept = TRUE)",sep = ""),collapse = "+")))
y_GDM = dist_use[upper.tri(dist_use)]
I_spline_bases = model.matrix(formula_use,data = X)
vec_distance = dist_mat[upper.tri(dist_mat)]
X_GDM = cbind(sapply(1:ncol(I_spline_bases),function(i){
dist_temp = rdist(I_spline_bases[,i])
vec_dist = dist_temp[upper.tri(dist_temp)]
vec_dist
}),
iSpline(vec_distance,degree = deg -1,
df = df_use,intercept = TRUE)
)
colnames(X_GDM) = c(
paste(rep(colnames(X),each = df_use ),"I",rep(1:df_use,times = ncol(X)),sep = ""),
paste("dist","I",1:df_use,sep = "")
)
y = y_GDM
dist = vec_distance
tmp = matrix(rep(1:nrow(dist_use),each = nrow(dist_use)),nrow = nrow(dist_use))
col_ind = tmp[upper.tri(tmp)]
tmp = matrix(rep(1:nrow(dist_use),times = nrow(dist_use)),nrow = nrow(dist_use))
row_ind = tmp[upper.tri(tmp)]
dat_full = cbind(data.frame(distance = y_GDM,
weights = rep(1,length(y_GDM)),
s1.xCoord = location_mat$easting[row_ind],
s1.yCoord = location_mat$northing[row_ind],
s2.xCoord = location_mat$easting[col_ind],
s2.yCoord = location_mat$northing[col_ind]),
s1 = X[row_ind,],
s2 = X[col_ind,])
gmd_mod = gdm(dat_full,geo = TRUE, splines = rep(5,8))
Y_is_one = which(y == 1)
Y_is_not_one = which(y != 1)
n1 = length(Y_is_one)
N = length(y)
p = ncol(X_GDM)
reps = 10e3
thin = 10
burn = 50e3
tune = 100
# reps = 500
# thin = 1
# burn = 500
# tune = 100
### tuning stuff
cand_sd_eta = readRDS("cand_sd_eta_chi.rds")
count_eta = 0
count_beta = rep(0,p+1)
cand_sd_beta = readRDS("scale_par_beta_chi.rds")
#### parameter
rho_fix = max(dist_mat)/10
R_spat = exp(-dist_mat/rho_fix)
chol_R = t(chol(R_spat))
R_inv = solve(R_spat)
out = readRDS("final_family.rds")
sig2_eta_save = out$sig2_eta
log_beta_sigma = out$log_beta_sigma
eta_save = out$eta
log_beta_save = out$log_beta
alpha_save = out$alpha
hist(alpha_save)
mean(alpha_save)
quantile(alpha_save,c(.025,.975))
beta_samps = exp(log_beta_save)
####### ####### ####### ####### ####### ####### #######
####### Plot variable importance
####### ####### ####### ####### ####### ####### #######
tmp = sapply(1:8,function(i){
bet_now = t(beta_samps[,(df_use*(i -1)+ 1):(df_use*i)])
return(apply(bet_now,2,function(x){
sum(x)}))
})
X_temp = X
colnames(X)
colnames(X_temp) = c("Precipitation","Rainfall Conc.","Elevation","Heat Load",
"Mean Temp", "Soil Conductivity","Soil Nitrogen","Distance")
colnames(tmp) = c(colnames(X_temp),"Distance")tmp_long = melt(tmp)
colnames(X_temp) = c("Precipitation","Rainfall Conc.","Elevation","Heat Load",
"Mean Temp", "Soil Conductivity","Soil Nitrogen")
colnames(tmp) = c(colnames(X_temp),"Distance")tmp_long = melt(tmp)
colnames(tmp_long) = c("rep","Covariate","Variable Importance")
colnames(X_temp) = c("Precipitation","Rainfall Conc.","Elevation","Heat Load",
"Mean Temp", "Soil Conductivity","Soil Nitrogen")
colnames(tmp) = c(colnames(X_temp),"Distance")
colnames(tmp_long) = c("rep","Covariate","Variable Importance")
colnames(tmp) = c(colnames(X_temp),"Distance")
tmp_long = melt(tmp)
colnames(tmp_long) = c("rep","Covariate","Variable Importance")
df2 = tmp_long %>%  group_by(Covariate) %>%
dplyr::summarize(mean = mean(`Variable Importance`),
CI_lo = quantile(`Variable Importance`,0.05),
CI_hi = quantile(`Variable Importance`,0.95))
quantiles_95 <- function(x) {
r <- quantile(x, probs=c(0.05, 0.25, 0.5, 0.75, 0.95))
names(r) <- c("ymin", "lower", "middle", "upper", "ymax")
r
}
ggplot(data = tmp_long,
aes(x = Covariate,y = `Variable Importance`,fill = Covariate)) +
stat_summary(fun.data = quantiles_95, geom="boxplot",
alpha = .5,size = .5,width=.5,fatten = NULL) +
theme(axis.text.x = element_text(angle = 300, vjust = 1, hjust=0))+
theme(axis.text=element_text(size=26),
#  axis.text.x = element_blank(),
axis.title=element_text(size=26),
legend.position = "none")+
scale_fill_viridis_d(end = .75) +
scale_color_viridis_d(end = .75)
ggplot(df2, aes(x=Covariate, y=mean, group=Covariate, color=Covariate)) +
# geom_line(size = 2) +
geom_hline(yintercept = 0:4/10,col = "darkgray",linetype = "dashed")+
geom_point(size = 2.5)+
geom_errorbar(aes(ymin=CI_lo  , ymax=CI_hi), width=.3,
position=position_dodge(0.05),size = .7) +
theme(axis.text.x = element_text(angle = 300, vjust = .5, hjust=0))+
theme(axis.text=element_text(size=26),
#  axis.text.x = element_blank(),
axis.title=element_text(size=26),
legend.position = "none")+
scale_fill_viridis_d(end = .75) +
scale_color_viridis_d(end = .75) +
labs(x="", y = "Variable Importance")
pdf("variable_importance2_fam.pdf",width = 12,height =8)
ggplot(df2, aes(x=Covariate, y=mean, group=Covariate, color=Covariate)) +
# geom_line(size = 2) +
geom_hline(yintercept = 0:4/10,col = "darkgray",linetype = "dashed")+
geom_point(size = 2.5)+
geom_errorbar(aes(ymin=CI_lo  , ymax=CI_hi), width=.3,
position=position_dodge(0.05),size = .7) +
theme(axis.text.x = element_text(angle = 300, vjust = .5, hjust=0))+
theme(axis.text=element_text(size=26),
#  axis.text.x = element_blank(),
axis.title=element_text(size=26),
legend.position = "none")+
scale_fill_viridis_d(end = .75) +
scale_color_viridis_d(end = .75) +
labs(x="", y = "Variable Importance")
dev.off()
setwd("~/Downloads/gs_example_code/misc")
source('source/setup.R')
source('../source/setup.R')
source('../source/utils.R')
library(gsDesign)
library(patchwork)
# The fixed design has about 90% power to detect 0.02 vs. 0.03
power.prop.test(n=5e3, p1=0.03, p2=0.03*0.66666, sig.level = 0.025, alternative = 'one.sided')
beta = 1 - power.prop.test(n=5e3, p1=0.03, p2=0.03*0.66666, sig.level = 0.025, alternative = 'one.sided')$power
# Determine the upper bound for my study
bound = gsDesign(
k = 4,              ### number of interims
test.type = 1,      ### one-sided test
alpha = 0.025,      ### type-I error
beta = beta,        ### 1- power
n.fix = 5e3,        ### fixed sample size
timing = 2:5/5,     ### Information fraction
sfu = 'OF'          ###
)
print(bound)
power.prop.test
beta = 1 - power.prop.test(n=5e3, p1=0.03, p2=0.03*0.66666, sig.level = 0.025, alternative = 'one.sided')$power
beta
# The fixed design has about 90% power to detect 0.02 vs. 0.03
power.prop.test(n=5e3, p1=0.03, p2=0.03*0.66666, sig.level = 0.025, alternative = 'one.sided')
beta = 1 - power.prop.test(n=5e3, p1=0.03, p2=0.03*0.66666, sig.level = 0.025, alternative = 'one.sided')$power
# Determine the upper bound for my study
bound = gsDesign(
k = 4,              ### number of interims
test.type = 1,      ### one-sided test
alpha = 0.025,      ### type-I error
beta = beta,        ### 1- power
n.fix = 5e3,        ### fixed sample size
timing = 2:5/5,     ### Information fraction
sfu = 'OF'          ###
)
print(bound)
# Determine the upper bound for my study
bound = gsDesign(
k = 1000,              ### number of interims
test.type = 1,      ### one-sided test
alpha = 0.025,      ### type-I error
beta = beta,        ### 1- power
n.fix = 5e3,        ### fixed sample size
timing = 2:5/5,     ### Information fraction
sfu = 'OF'          ###
)
print(bound)
# Determine the upper bound for my study
bound = gsDesign(
k = 1000,              ### number of interims
test.type = 1,      ### one-sided test
alpha = 0.025,      ### type-I error
beta = beta,        ### 1- power
n.fix = 5e3,        ### fixed sample size
timing = 2:5/5,     ### Information fraction
sfu = 'OF'          ###
)
# Determine the upper bound for my study
bound = gsDesign(
k = 100,              ### number of interims
test.type = 1,      ### one-sided test
alpha = 0.025,      ### type-I error
beta = beta,        ### 1- power
n.fix = 5e3,        ### fixed sample size
timing = 2:5/5,     ### Information fraction
sfu = 'OF'          ###
)
# Determine the upper bound for my study
bound = gsDesign(
k = 20,              ### number of interims
test.type = 1,      ### one-sided test
alpha = 0.025,      ### type-I error
beta = beta,        ### 1- power
n.fix = 5e3,        ### fixed sample size
timing = 2:5/5,     ### Information fraction
sfu = 'OF'          ###
)
# Determine the upper bound for my study
k_use = 1e3
bound = gsDesign(
k = k_use,              ### number of interims
test.type = 1,      ### one-sided test
alpha = 0.025,      ### type-I error
beta = beta,        ### 1- power
n.fix = 5e3,        ### fixed sample size
timing = seq(.3,1,length = k_use),     ### Information fraction
sfu = 'OF'          ###
)
seq(.3,1,length = k_use)
# Determine the upper bound for my study
k_use = 1e3
bound = gsDesign(
k = k_use,              ### number of interims
test.type = 1,      ### one-sided test
alpha = 0.025,      ### type-I error
beta = beta,        ### 1- power
n.fix = 5e3,        ### fixed sample size
timing = seq(.3,1,length = k_use),     ### Information fraction
sfu = 'OF'          ###
)
# Determine the upper bound for my study
k_use = 30
bound = gsDesign(
k = k_use,              ### number of interims
test.type = 1,      ### one-sided test
alpha = 0.025,      ### type-I error
beta = beta,        ### 1- power
n.fix = 5e3,        ### fixed sample size
timing = seq(.3,1,length = k_use),     ### Information fraction
sfu = 'OF'          ###
)
print(bound)
# Determine the upper bound for my study
k_use = 10
bound = gsDesign(
k = k_use,              ### number of interims
test.type = 1,      ### one-sided test
alpha = 0.025,      ### type-I error
beta = beta,        ### 1- power
n.fix = 5e3,        ### fixed sample size
timing = seq(.3,1,length = k_use),     ### Information fraction
sfu = 'OF'          ###
)
print(bound)
library(tidyverse)
library(stringr)
library(ggplot2)
library(reshape2)
library(abind)
library(parallel)
library(splines)
library(geoR)
library(fields)
library(geosphere)
library(splines2)
library(rgdal)
library(nimble)
library(vegan)
library(Hmisc)
library(TruncatedNormal)
library(emulator)
library(scoringRules)
############## map for families
# setwd("C:/Users/philaw/Box/Research/Turnover/code")
#setwd("C:/Users/philaw/Box/Research/ERT/data")
# rm(list = ls())
#
# K = 10
#
# mod_out = mclapply(1:K,function(qqq){
panama_data = read.csv("Panama_species.csv")[,-1]
setwd("~/Documents/Projects/Turnover/code/BC_data")
library(tidyverse)
library(stringr)
library(ggplot2)
library(reshape2)
library(abind)
library(parallel)
library(splines)
library(geoR)
library(fields)
library(geosphere)
library(splines2)
library(rgdal)
library(nimble)
library(vegan)
library(Hmisc)
library(TruncatedNormal)
library(emulator)
library(scoringRules)
############## map for families
# setwd("C:/Users/philaw/Box/Research/Turnover/code")
#setwd("C:/Users/philaw/Box/Research/ERT/data")
# rm(list = ls())
#
# K = 10
#
# mod_out = mclapply(1:K,function(qqq){
panama_data = read.csv("Panama_species.csv")[,-1]
panama_env = read.csv("Panama_env.csv")
location_mat = panama_env[,2:3]
envr_use = panama_env[,4:5]
species_mat = panama_data
ns = nrow(location_mat)
ns
library(tidyr)
library(dplyr)
library(stringr)
library(purrr)
library(ggplot2)
library(reshape2)
library(abind)
library(parallel)
library(splines)
library(geoR)
library(fields)
library(geosphere)
library(splines2)
library(rgdal)
library(nimble)
library(vegan)
library(Hmisc)
library(TruncatedNormal)
library(emulator)
library(scoringRules)
library(gdm)
library(sf)
############## map for families
rm(list = ls())
data(southwest)
tmp = sf::sf_project(from = "EPSG:4326", to = "EPSG:32651",
cbind( southwest$Long,southwest$Lat))
southwest$x = tmp[,1]/1000
southwest$y = tmp[,2]/1000
southwest$present = 1
sppData = southwest[c(1,2,15,16)]
envTab = southwest[c(2:12)]
# sitePairTab = formatsitepair(sppData,2,XColumn="x",YColumn="y",sppColumn="species",
#                              siteColumn="site",predData=envTab)
south_block =southwest%>%
group_by(site,x,y,phTotal,bio5,bio19,species) %>%
dplyr::summarize(isPresent = mean(present)) %>%
spread(species, isPresent,fill = 0) #%>%
# panama_data = read.csv("Panama_species.csv")[,-1]
# panama_env = read.csv("Panama_env.csv")
location_mat = south_block[,2:3]
envr_use = south_block[,4:6]
species_mat = south_block[,-(1:6)]
ns = nrow(location_mat)
ns
setwd("~/Documents/Projects/Turnover/code/BC_data")
library(tidyverse)
library(stringr)
library(ggplot2)
library(reshape2)
library(abind)
library(parallel)
library(splines)
library(geoR)
library(fields)
library(geosphere)
library(splines2)
library(rgdal)
library(nimble)
library(vegan)
library(Hmisc)
library(TruncatedNormal)
library(emulator)
library(scoringRules)
############## map for families
# setwd("C:/Users/philaw/Box/Research/Turnover/code")
#setwd("C:/Users/philaw/Box/Research/ERT/data")
# rm(list = ls())
#
# K = 10
#
# mod_out = mclapply(1:K,function(qqq){
panama_data = read.csv("Panama_species.csv")[,-1]
panama_env = read.csv("Panama_env.csv")
location_mat = panama_env[,2:3]
envr_use = panama_env[,4:5]
species_mat = panama_data
ns = nrow(location_mat)
dist_use = as.matrix(vegdist(species_mat,"bray"))
mean(dist_use[upper.tri(dist_use)] == 0)
mean(dist_use[upper.tri(dist_use)] == 1)
setwd("~/Documents/Projects/Turnover/code/BC_data/nimble_code")
